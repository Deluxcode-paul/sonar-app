{"remainingRequest":"/home/lera/Projects/sonar.software-master/node_modules/thread-loader/dist/cjs.js!/home/lera/Projects/sonar.software-master/node_modules/babel-loader/lib/index.js!/home/lera/Projects/sonar.software-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lera/Projects/sonar.software-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lera/Projects/sonar.software-master/node_modules/vue-flickity/src/flickity.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lera/Projects/sonar.software-master/node_modules/vue-flickity/src/flickity.vue","mtime":499162500000},{"path":"/home/lera/Projects/sonar.software-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lera/Projects/sonar.software-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lera/Projects/sonar.software-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lera/Projects/sonar.software-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lera/Projects/sonar.software-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    options: Object\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init: function init() {\n      var Flickity = require('flickity');\n\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity: function flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select: function select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next: function next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous: function previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell: function selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize: function resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition: function reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend: function prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append: function append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert: function insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove: function remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer: function playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer: function stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer: function pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer: function unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender: function rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy: function destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells: function reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements: function getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data: function data() {\n      var Flickity = require('flickity');\n\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on: function on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off: function off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once: function once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement: function selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements: function selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex: function selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells: function cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides: function slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag: function disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag: function enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    }\n  }\n};",{"version":3,"sources":["flickity.vue"],"names":[],"mappings":";;;;;;AAOA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GADA;AAKA,EAAA,OALA,qBAKA;AACA,SAAA,IAAA;AACA,GAPA;AASA,EAAA,aATA,2BASA;AACA,SAAA,SAAA,CAAA,OAAA;AACA,SAAA,SAAA,GAAA,IAAA;AACA,GAZA;AAcA,EAAA,OAAA,EAAA;AACA;;;AAGA,IAAA,IAJA,kBAIA;AACA,UAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,WAAA,SAAA,GAAA,IAAA,QAAA,CAAA,KAAA,GAAA,EAAA,KAAA,OAAA,CAAA;AACA,WAAA,KAAA,CAAA,MAAA,EAAA,KAAA,SAAA;AACA,KATA;;AAWA;;;;;AAKA,IAAA,QAhBA,sBAgBA;AACA,aAAA,KAAA,SAAA;AACA,KAlBA;;AAoBA;;;;AAIA;;;;;;;AAOA,IAAA,MA/BA,kBA+BA,KA/BA,EA+BA,SA/BA,EA+BA,SA/BA,EA+BA;AACA,WAAA,SAAA,CAAA,MAAA,CAAA,KAAA,EAAA,SAAA,EAAA,SAAA;AACA,KAjCA;;AAmCA;;;;;;AAMA,IAAA,IAzCA,gBAyCA,SAzCA,EAyCA,SAzCA,EAyCA;AACA,WAAA,SAAA,CAAA,IAAA,CAAA,SAAA,EAAA,SAAA;AACA,KA3CA;;AA6CA;;;;;;AAMA,IAAA,QAnDA,oBAmDA,SAnDA,EAmDA,SAnDA,EAmDA;AACA,WAAA,SAAA,CAAA,QAAA,CAAA,SAAA,EAAA,SAAA;AACA,KArDA;;AAuDA;;;;;;;AAOA,IAAA,UA9DA,sBA8DA,KA9DA,EA8DA,SA9DA,EA8DA,SA9DA,EA8DA;AACA,WAAA,SAAA,CAAA,UAAA,CAAA,KAAA,EAAA,SAAA,EAAA,SAAA;AACA,KAhEA;;AAkEA;;;;AAIA;;;AAGA,IAAA,MAzEA,oBAyEA;AACA,WAAA,SAAA,CAAA,MAAA;AACA,KA3EA;;AA6EA;;;AAGA,IAAA,UAhFA,wBAgFA;AACA,WAAA,SAAA,CAAA,UAAA;AACA,KAlFA;;AAoFA;;;;AAIA;;;;;AAKA,IAAA,OA7FA,mBA6FA,QA7FA,EA6FA;AACA,WAAA,SAAA,CAAA,OAAA,CAAA,QAAA;AACA,KA/FA;;AAiGA;;;;;AAKA,IAAA,MAtGA,kBAsGA,QAtGA,EAsGA;AACA,WAAA,SAAA,CAAA,MAAA,CAAA,QAAA;AACA,KAxGA;;AA0GA;;;;;;AAMA,IAAA,MAhHA,kBAgHA,QAhHA,EAgHA,KAhHA,EAgHA;AACA,WAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,KAAA;AACA,KAlHA;;AAoHA;;;;;AAKA,IAAA,MAzHA,kBAyHA,QAzHA,EAyHA;AACA,WAAA,SAAA,CAAA,MAAA,CAAA,QAAA;AACA,KA3HA;;AA6HA;;;;AAIA;;;AAGA,IAAA,UApIA,wBAoIA;AACA,WAAA,SAAA,CAAA,UAAA;AACA,KAtIA;;AAwIA;;;AAGA,IAAA,UA3IA,wBA2IA;AACA,WAAA,SAAA,CAAA,UAAA;AACA,KA7IA;;AA+IA;;;AAGA,IAAA,WAlJA,yBAkJA;AACA,WAAA,SAAA,CAAA,WAAA;AACA,KApJA;;AAsJA;;;AAGA,IAAA,aAzJA,2BAyJA;AACA,WAAA,SAAA,CAAA,aAAA;AACA,KA3JA;;AA6JA;;;AAGA,IAAA,QAhKA,sBAgKA;AACA,WAAA,SAAA,CAAA,OAAA;AACA,WAAA,IAAA;AACA,KAnKA;;AAqKA;;;;AAIA;;;AAGA,IAAA,OA5KA,qBA4KA;AACA,WAAA,SAAA,CAAA,OAAA;AACA,KA9KA;;AAgLA;;;AAGA,IAAA,WAnLA,yBAmLA;AACA,WAAA,SAAA,CAAA,WAAA;AACA,KArLA;;AAuLA;;;;;AAKA,IAAA,eA5LA,6BA4LA;AACA,aAAA,KAAA,SAAA,CAAA,eAAA,EAAA;AACA,KA9LA;;AAgMA;;;;;AAKA,IAAA,IArMA,kBAqMA;AACA,UAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,aAAA,QAAA,CAAA,IAAA,CAAA,KAAA,GAAA,CAAA;AACA,KAzMA;;AA2MA;;;;AAIA;;;;;;AAMA,IAAA,EArNA,cAqNA,SArNA,EAqNA,QArNA,EAqNA;AACA,WAAA,SAAA,CAAA,EAAA,CAAA,SAAA,EAAA,QAAA;AACA,KAvNA;;AAyNA;;;;;;AAMA,IAAA,GA/NA,eA+NA,SA/NA,EA+NA,QA/NA,EA+NA;AACA,WAAA,SAAA,CAAA,GAAA,CAAA,SAAA,EAAA,QAAA;AACA,KAjOA;;AAmOA;;;;;;AAMA,IAAA,IAzOA,gBAyOA,SAzOA,EAyOA,QAzOA,EAyOA;AACA,WAAA,SAAA,CAAA,IAAA,CAAA,SAAA,EAAA,QAAA;AACA,KA3OA;;AA6OA;;;;AAIA;;;;;AAKA,IAAA,eAtPA,6BAsPA;AACA,aAAA,KAAA,SAAA,CAAA,eAAA;AACA,KAxPA;;AA0PA;;;;;AAKA,IAAA,gBA/PA,8BA+PA;AACA,aAAA,KAAA,SAAA,CAAA,gBAAA;AACA,KAjQA;;AAmQA;;;;;AAKA,IAAA,aAxQA,2BAwQA;AACA,aAAA,KAAA,SAAA,CAAA,aAAA;AACA,KA1QA;;AA4QA;;;;;AAKA,IAAA,KAjRA,mBAiRA;AACA,aAAA,KAAA,SAAA,CAAA,KAAA;AACA,KAnRA;;AAqRA;;;;;AAKA,IAAA,MA1RA,oBA0RA;AACA,aAAA,KAAA,SAAA,CAAA,MAAA;AACA,KA5RA;;AA8RA;;;AAGA,IAAA,WAjSA,yBAiSA;AACA,WAAA,SAAA,CAAA,OAAA,CAAA,SAAA,GAAA,KAAA;AACA,WAAA,SAAA,CAAA,eAAA;AACA,KApSA;;AAsSA;;;AAGA,IAAA,UAzSA,wBAySA;AACA,WAAA,SAAA,CAAA,OAAA,CAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,CAAA,eAAA;AACA;AA5SA;AAdA,CAAA","sourcesContent":["<template>\n  <div>\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    options: Object,\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n\n  methods: {\n    /**\n     * Initialize a new flickity and emit init event.\n     */\n    init() {\n      const Flickity = require('flickity');\n\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit('init', this.$flickity);\n    },\n\n    /**\n     * Return the current flickity instance to access directly\n     *\n     * @return {Flickity}\n     */\n    flickity() {\n      return this.$flickity;\n    },\n\n    /**\n     * Selecting Slides\n     */\n\n    /**\n     * Select a slide\n     *\n     * @param {number} index\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the next slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\n     * Change to the previous slide\n     *\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\n     * Select a cell\n     *\n     * @param {number} value\n     * @param {boolean} isWrapped\n     * @param {boolean} isInstant\n     */\n    selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\n     * Sizing and Positioning\n     */\n\n    /**\n     * Trigger a resize event\n     */\n    resize() {\n      this.$flickity.resize();\n    },\n\n    /**\n     * Trigger a reposition event\n     */\n    reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\n     * Adding and removing cells\n     */\n\n    /**\n     * Prepend elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\n     * Append elements to flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\n     * Insert elements at a given index\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     * @param {number} index\n     */\n    insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\n     * Remove elements from flickity\n     *\n     * @param {array|HTMLElement|NodeList} elements\n     */\n    remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\n     * Player\n     */\n\n    /**\n     * Trigger a playPlayer event\n     */\n    playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\n     * Trigger a stopPlayer event\n     */\n    stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\n     * Trigger a pausePlayer event\n     */\n    pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\n     * Trigger a unpausePlayer event\n     */\n    unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\n     * Utilities\n     */\n\n    /**\n     * Destroy the flickity instance\n     */\n    destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\n     * Trigger a rerender event\n     */\n    reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\n     * Get the cell elements\n     *\n     * @return {array}\n     */\n    getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\n     * Return flickity data\n     *\n     * @return {Flickity}\n     */\n    data() {\n      const Flickity = require('flickity');\n\n      return Flickity.data(this.$el);\n    },\n\n    /**\n     * Events\n     */\n\n    /**\n     * Attach an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\n     * Remove an event\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\n     * Attach an event once\n     *\n     * @param {string} eventName\n     * @param {function} listener\n     */\n    once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\n     * Properties\n     */\n\n    /**\n     * Return the selected element\n     *\n     * @return {HTMLElement}\n     */\n    selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\n     * Return the selected elements\n     *\n     * @return {array}\n     */\n    selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\n     * Return the selected index\n     *\n     * @return {number}\n     */\n    selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\n     * Return the cells\n     *\n     * @return {array}\n     */\n    cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\n     * Return the slides\n     *\n     * @return {array}\n     */\n    slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\n     * Disable dragging of slider\n     */\n    disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\n     * Enable dragging of slider\n     */\n    enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    },\n  },\n};\n</script>\n\n<style src='flickity/dist/flickity.css'></style>\n"],"sourceRoot":"node_modules/vue-flickity/src"}]}